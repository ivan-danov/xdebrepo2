#!/bin/bash

xdebrepo2help_repo_create()
{
	echo -e "\n\t\t<repodir> <gpg dir> <key>"
}
xdebrepo2_repo_create()
{
# 	<repodir> <gpg home> <key>
# 	echo "${FUNCNAME[0]}($#): $@"
	if [ $# -ne 3 ]; then
		usage $FUNCNAME
	fi
	conf_load
	REPO_CONF_PATH="$(realpath "${XDEBREPO2_CONF_PATH}/${1}")"
	REPO_CONF_FILE="${REPO_CONF_PATH}/${REPO_CONF_FILE}"
	if [ -f "${REPO_CONF_FILE}" ]; then
		echo "ERROR: config file for repository exists ('${REPO_CONF_FILE}')"
		exit 1
	fi

	if [ -d "${XDEBREPO2_PATH}/${1}" ]; then
		echo "ERROR: repository directory exists ('${XDEBREPO2_PATH}/${1}')"
		exit 1
	fi

	# check for key
	REPO_GNUPGHOME="${XDEBREPO2_CONF_PATH}/${2}/.gnupg"
	if [ -d "${REPO_GNUPGHOME}" ]; then
		REPO_GNUPGHOME="$(realpath "${XDEBREPO2_CONF_PATH}/${2}/.gnupg")"
	fi
	if [ ! -d "${REPO_GNUPGHOME}" ]; then
		echo "ERROR: no gpg key, use ${SCRIPT_CMD} key gen"
		exit 1
	fi
	if ! gpg --homedir="${REPO_GNUPGHOME}" -K "${3}"; then
		echo "ERROR: no key '${3}' in gpg home dir '${REPO_GNUPGHOME}'"
		exit 1
	fi
	# echo "gpg res $?"

	mkdir -p -- "${XDEBREPO2_PATH}/${1}"
	REPO_PATH="$(realpath "${XDEBREPO2_PATH}/${1}")"
	REPO_SUITE="$(basename "${REPO_PATH}")"

	sub_key=$(gpg --homedir="${REPO_GNUPGHOME}" -k --with-colons "${3}"|grep sub|cut -d ':' -f 5)
	REPO_SEC_KEY=${sub_key}
	REPO_WEB_DIR=$(remove_double_slash "${XDEBREPO2_WEB_PATH}/${REPO_PATH#"$XDEBREPO2_PATH"}")
	REPO_SRV_NAME=${REPO_SRV_NAME:-"${1}.xdebrepo2"}
	REPO_COMPONENTS=${REPO_COMPONENTS:-main}
	REPO_ORIGIN=${REPO_ORIGIN:-"XDebRepo2 ${3} ${REPO_SUITE} repository"}
	REPO_DESCRIPTION=${REPO_DESCRIPTION:-"XDebRepo2 ${3} ${REPO_SUITE} repository"}

	echo "# repository params '$1' '$2' '$3'"
	echo "REPO_OWNER=\"${3}\""
	echo "REPO_GNUPGHOME=\"${REPO_GNUPGHOME}\""
	echo "REPO_SEC_KEY=\"${REPO_SEC_KEY}\""
	echo "REPO_PATH=\"${REPO_PATH}\""
	echo "REPO_WEB_DIR=\"${REPO_WEB_DIR}\""
	echo "REPO_SRV_NAME=\"${REPO_SRV_NAME}\""
	echo "REPO_COMPONENTS=\"${REPO_COMPONENTS}\""
	echo "REPO_ORIGIN=\"${REPO_ORIGIN}\""
	echo "REPO_DESCRIPTION=\"${REPO_DESCRIPTION}\""

	mkdir -p -- "${REPO_PATH}/conf"
	chmod 0755 -- "${REPO_PATH}"

	# cat > ${REPO_PATH}/conf/options << EOF
	# verbose
	# basedir ${REPO_PATH}
	# ask-passphrase
	# EOF

	mkdir -p -- "${REPO_CONF_PATH}"
	chmod 0700 -- "${REPO_CONF_PATH}"
	echo "# repository params '$1' '$2' '$3'" > "${REPO_CONF_FILE}"
	echo "REPO_OWNER=\"${3}\"" >> "${REPO_CONF_FILE}"
	echo "REPO_GNUPGHOME=\"${REPO_GNUPGHOME}\"" >> "${REPO_CONF_FILE}"
	echo "REPO_SEC_KEY=\"${REPO_SEC_KEY}\"" >> "${REPO_CONF_FILE}"
	echo "REPO_PATH=\"${REPO_PATH}\"" >> "${REPO_CONF_FILE}"
	echo "REPO_WEB_DIR=\"${REPO_WEB_DIR}\"" >> "${REPO_CONF_FILE}"
	echo "REPO_SRV_NAME=\"${REPO_SRV_NAME}\"" >> "${REPO_CONF_FILE}"
	echo "REPO_COMPONENTS=\"${REPO_COMPONENTS}\"" >> "${REPO_CONF_FILE}"
	echo "REPO_ORIGIN=\"${REPO_ORIGIN}\"" >> "${REPO_CONF_FILE}"
	echo "REPO_DESCRIPTION=\"${REPO_DESCRIPTION}\"" >> "${REPO_CONF_FILE}"

	echo "Check and fix repo config file '${REPO_CONF_FILE}'"
}

xdebrepo2help_repo_destroy()
{
	echo -e "\n\t\t<repodir>"
}
xdebrepo2_repo_destroy()
{
# 	<repodir>
# 	echo "${FUNCNAME[0]}($#): $@"
	if [ $# -ne 1 ]; then
		usage $FUNCNAME
	fi
	conf_load

	REPO_CONF_PATH="$(realpath "${XDEBREPO2_CONF_PATH}/${1}")"
	if [ -d "${REPO_CONF_PATH}" ]; then
		rm -rf "${REPO_CONF_PATH}"
	fi
	REPO_PATH="$(realpath "${XDEBREPO2_PATH}/${1}")"
	if [ -d "${REPO_PATH}" ]; then
		rm -rf "${REPO_PATH}"
	fi
}

xdebrepo2help_repo_ls()
{
	echo -e "\n\t\tlist all repos"
}
xdebrepo2_repo_ls()
{
# 	<repodir>
# 	echo "${FUNCNAME[0]}($#): $@"
	conf_load

	REPO_CONF_PATH="$(realpath "${XDEBREPO2_CONF_PATH}")"
	find ${REPO_CONF_PATH} -mindepth 2 -name '*xdebrepo2.conf' -print0 2>/dev/null | \
		xargs -0 -I{} dirname "{}" -z|xargs -0 -I{} basename "{}"
}

xdebrepo2help_repo_dist_add()
{
	echo -e "\n\t\t<repodir> <distname> <arch>"
}
xdebrepo2_repo_dist_add()
{
# 	<repodir> <distname> <deb name>
# 	echo "${FUNCNAME[0]}($#): $@"
	if [ $# -ne 3 ]; then
		usage $FUNCNAME
	fi
	conf_load
	REPO_CONF_PATH="$(realpath "${XDEBREPO2_CONF_PATH}/${1}")"
	REPO_CONF_FILE="${REPO_CONF_PATH}/${REPO_CONF_FILE}"
	repo_conf_load "$REPO_CONF_FILE"

	REPREPRO="reprepro -vvv "
	export GNUPGHOME="${REPO_GNUPGHOME}"

	REPO_ARCH="${3}"
	REPO_CODENAME="${2}"
	REPO_SUITE="$(basename "${REPO_PATH}")"

	if [ ! -d "${REPO_PATH}/conf" ]; then
		mkdir -p -- "${REPO_PATH}/conf"
	fi

	if [ $(grep "Codename: ${REPO_CODENAME}" "${REPO_PATH}/conf/distributions" 2>/dev/null|wc -l) -eq 0 ]; then

		if [ "${REPO_ARCH}" == "all" ]; then
			REPO_ARCH=amd64
		fi

		cat >> "${REPO_PATH}/conf/distributions" << EOF

Origin: ${REPO_ORIGIN}
Label: ${REPO_SRV_NAME}/${REPO_WEB_DIR}
Codename: ${REPO_CODENAME}
Suite: ${REPO_SUITE}
Architectures: ${REPO_ARCH}
Components: ${REPO_CODENAME}/${REPO_COMPONENTS}
Description: ${REPO_DESCRIPTION}
SignWith: ${REPO_SEC_KEY}
EOF

		mkdir -p -- /${REPO_PATH}/dists/${REPO_CODENAME}/${REPO_COMPONENTS}

	fi
}

xdebrepo2help_repo_add()
{
	echo -e "\n\t\t<repodir> <distname> <deb file> [<deb file> ...]"
}
xdebrepo2_repo_add()
{
# 	<repodir> <distname> <deb name>
# 	echo "${FUNCNAME[0]}($#): $@"
	if [ $# -lt 3 ]; then
		usage $FUNCNAME
	fi
	conf_load
	REPO_CONF_PATH="$(realpath "${XDEBREPO2_CONF_PATH}/${1}")"
	REPO_CONF_FILE="${REPO_CONF_PATH}/${REPO_CONF_FILE}"
	repo_conf_load "$REPO_CONF_FILE"

	REPREPRO="reprepro -vvv "
	export GNUPGHOME="${REPO_GNUPGHOME}"
	REPO_CODENAME=${2}
	shift
	shift

	for DEBNAME in "$@"; do

		REPO_ARCH=$(dpkg --info "${DEBNAME}" | awk '/Architecture/ {printf "%s", $2}')
		REPO_SUITE="$(basename "${REPO_PATH}")"

		if [ ! -d "${REPO_PATH}/conf" ]; then
			mkdir -p -- "${REPO_PATH}/conf"
		fi

		if [ $(grep "Codename: ${REPO_CODENAME}" "${REPO_PATH}/conf/distributions" 2>/dev/null|wc -l) -eq 0 ]; then

			if [ "${REPO_ARCH}" == "all" ]; then
				REPO_ARCH=amd64
			fi

			cat >> "${REPO_PATH}/conf/distributions" << EOF

Origin: ${REPO_ORIGIN}
Label: ${REPO_SRV_NAME}/${REPO_WEB_DIR}
Codename: ${REPO_CODENAME}
Suite: ${REPO_SUITE}
Architectures: ${REPO_ARCH}
Components: ${REPO_CODENAME}/${REPO_COMPONENTS}
Description: ${REPO_DESCRIPTION}
SignWith: ${REPO_SEC_KEY}
EOF

		fi

		PACKAGE_NAME=$(dpkg --info "${DEBNAME}" | awk '/Package/ {printf "%s", $2}')
		${REPREPRO} -b "${REPO_PATH}" remove ${REPO_CODENAME} "${PACKAGE_NAME}"
		if [ $? -ne 0 ]; then
			exit 1
		fi

		${REPREPRO} -b "${REPO_PATH}" includedeb ${REPO_CODENAME} "${DEBNAME}"
		if [ $? -ne 0 ]; then
			exit 1
		fi

	done

	# remove old
	${REPREPRO} -b "${REPO_PATH}" --delete clearvanished
	if [ $? -ne 0 ]; then
		exit 1
	fi

	if [ -d "${REPO_PATH}/conf/updates" ]; then
		# run an update
		${REPREPRO} -b "${REPO_PATH}" --keepunreferencedfiles --noskipold update
		if [ $? -ne 0 ]; then
			exit 1
		fi
	fi
}

xdebrepo2help_repo_del()
{
	echo -e "\n\t\t<repodir> <distname> <package name>"
}
xdebrepo2_repo_del()
{
# 	<repodir> <distname> <package name>
# 	echo "${FUNCNAME[0]}($#): $@"
	if [ $# -ne 3 ]; then
		usage $FUNCNAME
	fi
	conf_load
	REPO_CONF_PATH="$(realpath "${XDEBREPO2_CONF_PATH}/${1}")"
	REPO_CONF_FILE="${REPO_CONF_PATH}/${REPO_CONF_FILE}"
	repo_conf_load "$REPO_CONF_FILE"

	REPREPRO="reprepro -vvv"
	export GNUPGHOME=${REPO_GNUPGHOME}

	${REPREPRO} -b "${REPO_PATH}" remove "${2}" "${3}"

	# remove old
	${REPREPRO} -b "${REPO_PATH}" --delete clearvanished

	if [ -d "${REPO_PATH}/conf/updates" ]; then
		# run an update
		${REPREPRO} -b "${REPO_PATH}" --keepunreferencedfiles --noskipold update
	fi
}

xdebrepo2help_repo_list()
{
	echo -e "\n\t\t<repodir> [distname]"
}
xdebrepo2_repo_list()
{
# 	<repodir> [distname]
# 	echo "${FUNCNAME[0]}($#): $@"
	if [ $# -lt 1 ] || [ $# -gt 2 ]; then
		usage $FUNCNAME
	fi
	conf_load
	REPO_CONF_PATH="$(realpath "${XDEBREPO2_CONF_PATH}/${1}")"
	REPO_CONF_FILE="${REPO_CONF_PATH}/${REPO_CONF_FILE}"
	repo_conf_load "$REPO_CONF_FILE"

	REPREPRO="reprepro -vvv"
	export GNUPGHOME=${REPO_GNUPGHOME}

	if [ $# -eq 2 ]; then
		${REPREPRO} -b "${REPO_PATH}" list "${2}"
		return
	fi
	if [ ! -d "${REPO_PATH}/dists" ]; then
		return
	fi
	for DIST_NAME in $(ls "${REPO_PATH}/dists" 2>/dev/null); do
		${REPREPRO} -b "${REPO_PATH}" list ${DIST_NAME}
	done
}

xdebrepo2help_repo_aptconf_ssh()
{
	echo -e "\n\t\t<repodir>"
}
xdebrepo2_repo_aptconf_ssh()
{
# 	<repodir>
# 	echo "${FUNCNAME[0]}($#): $@"
	if [ $# -ne 1 ]; then
		usage $FUNCNAME
	fi
	conf_load
	REPO_CONF_PATH="$(realpath "${XDEBREPO2_CONF_PATH}/${1}")"
	REPO_CONF_FILE="${REPO_CONF_PATH}/${REPO_CONF_FILE}"
	repo_conf_load "$REPO_CONF_FILE"

	REPO_ARCH=$(cat "${REPO_PATH}/conf/distributions"|sort -u|awk '/Architectures/ {printf "%s,", $2}')

	for DIST_NAME in $(ls "${REPO_PATH}/dists"); do
		rp=$(remove_double_slash "${REPO_SRV_NAME}/${REPO_PATH}")
		echo "deb [ arch=${REPO_ARCH%,} ] ssh://${rp} ${DIST_NAME} ${DIST_NAME}/main"
		# echo "deb [ arch=${REPO_ARCH%,} signed-by=${GPGFILE} ] \"http://${REPO_SRV_NAME}/${REPO_WEB_DIR}\" ${DIST_NAME} ${DIST_NAME}/main" >> ${LISTFILE}
	done
}

xdebrepo2help_repo_aptconf_http()
{
	echo -e "\n\t\t<repodir>"
}
xdebrepo2_repo_aptconf_http()
{
# 	echo "${FUNCNAME[0]}($#): $@"
	if [ $# -ne 1 ]; then
		usage $FUNCNAME
	fi
	conf_load
	REPO_CONF_PATH="$(realpath "${XDEBREPO2_CONF_PATH}/${1}")"
	REPO_CONF_FILE="${REPO_CONF_PATH}/${REPO_CONF_FILE}"
	repo_conf_load "$REPO_CONF_FILE"

	REPO_ARCH=$(cat "${REPO_PATH}/conf/distributions"|sort -u|awk '/Architectures/ {printf "%s,", $2}')

	for DIST_NAME in $(ls "${REPO_PATH}/dists"); do
		rp=$(remove_double_slash "${REPO_SRV_NAME}/${REPO_PATH}")
		echo "deb [ arch=${REPO_ARCH%,} ] http://${rp} ${DIST_NAME} ${DIST_NAME}/main"
		# echo "deb [ arch=${REPO_ARCH%,} signed-by=${GPGFILE} ] \"http://${REPO_SRV_NAME}/${REPO_WEB_DIR}\" ${DIST_NAME} ${DIST_NAME}/main" >> ${LISTFILE}
	done
}

xdebrepo2help_repo_pubkey()
{
	echo -e "\n\t\t<repodir>"
}
xdebrepo2_repo_pubkey()
{
# 	echo "${FUNCNAME[0]}($#): $@"
	if [ $# -ne 1 ]; then
		usage $FUNCNAME
	fi
	conf_load
	REPO_CONF_PATH="$(realpath "${XDEBREPO2_CONF_PATH}/${1}")"
	REPO_CONF_FILE="${REPO_CONF_PATH}/${REPO_CONF_FILE}"
	repo_conf_load "$REPO_CONF_FILE"

	# export public key
	gpg --homedir=${REPO_GNUPGHOME} -a --export "${REPO_SEC_KEY}"
}

xdebrepo2help_repo_gen_install_deb()
{
	echo -e "\n\t\t<repodir> <maintainer>"
}
xdebrepo2_repo_gen_install_deb()
{
# 	echo "${FUNCNAME[0]}($#): $@"
	if [ $# -ne 2 ]; then
		usage $FUNCNAME
	fi
	conf_load
	REPO_CONF_PATH="$(realpath "${XDEBREPO2_CONF_PATH}/${1}")"
	REPO_CONF_FILE="${REPO_CONF_PATH}/${REPO_CONF_FILE}"
	repo_conf_load "$REPO_CONF_FILE"

	REPO_ARCH=$(cat "${REPO_PATH}/conf/distributions"|sort -u|awk '/Architectures/ {printf "%s,", $2}')

	REPO_SUITE="$(basename "${REPO_PATH}")"

	DEBDIR="xdebrepo2-${REPO_SUITE}-apt-source"
	DEBVER=0.0.1-1
	mkdir -p -- ${DEBDIR}/etc/apt/sources.list.d
	mkdir -p -- ${DEBDIR}/etc/apt/trusted.gpg.d

	GPGFILE="/etc/apt/trusted.gpg.d/${REPO_SUITE}.gpg"
	LISTFILE="${DEBDIR}/etc/apt/sources.list.d/${REPO_SUITE}.list"

	if [ ! -f "${DEBDIR}${GPGFILE}" ]; then
		# export public key
		gpg --homedir="${REPO_GNUPGHOME}" --output "${DEBDIR}${GPGFILE}" --export "${REPO_SEC_KEY}"
	fi

	echo "# ${REPO_SUITE} repo" > "${LISTFILE}"
	for DIST_NAME in $(ls "${REPO_PATH}/dists"); do
		echo "deb [ arch=${REPO_ARCH%,} signed-by=${GPGFILE} ] \"http://${REPO_SRV_NAME}/${REPO_WEB_DIR}\" ${DIST_NAME} ${DIST_NAME}/main" >> "${LISTFILE}"
	done

	mkdir -p -- "${DEBDIR}/usr/share/doc/${DEBDIR}"

	DEBIANIZED_BY=$(id -un)
	full=$(cat /etc/passwd|grep "${DEBIANIZED_BY}:x"|cut -d ':' -f 5|cut -d ',' -f 1)
	if [ ! -z "${full}" ]; then
		DEBIANIZED_BY=${full}
	fi

	cat > "${DEBDIR}/usr/share/doc/${DEBDIR}/copyright" << EOF
xdebrepo2 ${REPO_SUITE} repository

This package was debianized by ${DEBIANIZED_BY}.  $(date -R)

Copyright: (c) $(date +"%Y") ${2}

EOF

	cat > "${DEBDIR}/usr/share/doc/${DEBDIR}/changelog" << EOF
${DEBDIR} (${DEBVER}) unstable; urgency=medium

  * Release ${DEBVER}

 -- ${2}  $(date -R)
EOF
	gzip -9 -n "${DEBDIR}/usr/share/doc/${DEBDIR}/changelog"

	mkdir -p -- "${DEBDIR}/DEBIAN"
	cat > ${DEBDIR}/DEBIAN/control << EOF
Package: ${DEBDIR}
Version: ${DEBVER}
Architecture: all
Section: misc
Maintainer: ${2}
Homepage: http://${REPO_SRV_NAME}/${REPO_WEB_DIR}
Priority: optional
Installed-Size: $(du -sl ${DEBDIR}/|cut -f 1)
Description: ${REPO_ORIGIN}
 ${REPO_DESCRIPTION}
EOF

	pushd ${DEBDIR} > /dev/null
	if [ -d etc ]; then
                find etc -type f -exec md5sum '{}' \; > DEBIAN/md5sums
	fi
	if [ -d usr ]; then
                find usr -type f -exec md5sum '{}' \; >> DEBIAN/md5sums
	fi
	if [ -d lib ]; then
                find lib -type f -exec md5sum '{}' \; >> DEBIAN/md5sums
	fi

	if [ -d etc ]; then
                find etc -type f -fprintf DEBIAN/conffiles "/%p\n"
	fi
	popd > /dev/null

	chmod -R g-w -- "${DEBDIR}"
        fakeroot dpkg --build "${DEBDIR}" "${DEBDIR}_${DEBVER}_all.deb"
        rm -rf "${DEBDIR}"

        lintian ${LINTIAN_FLAGS:-} --tag-display-limit 0 "${DEBDIR}_${DEBVER}_all.deb" || true
}

xdebrepo2help_repo_dists()
{
	echo -e "\n\t\tdists <repodir>"
}
xdebrepo2_repo_dists()
{
# 	echo "${FUNCNAME[0]}($#): $@"
	if [ $# -ne 1 ]; then
		usage $FUNCNAME
	fi
	conf_load
	REPO_CONF_PATH="$(realpath "${XDEBREPO2_CONF_PATH}/${1}")"
	REPO_CONF_FILE="${REPO_CONF_PATH}/${REPO_CONF_FILE}"
	repo_conf_load "$REPO_CONF_FILE"

	cat ${REPO_PATH}/conf/distributions 2>/dev/null| awk '/Codename:/ {printf "%s\n", $2}'
}

xdebrepo2help_repo()
{
	gen_subcmds "${FUNCNAME[0]#${CMDS_START_WITH}help_}"
}

xdebrepo2_repo()
{
#	echo "${FUNCNAME[0]}($#): $@"
	if [ $# -eq 0 ]; then
		usage $FUNCNAME
	fi
	fname="${FUNCNAME[0]}_${1}"
	if [ "$(type -t "${fname}")" != "function" ]; then
		usage $FUNCNAME
	fi
	shift
	${fname} "$@"
}

