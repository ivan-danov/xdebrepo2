#!/bin/bash

xdebrepo2help_key()
{
	echo -e "\tWork with GPG keys"
}
xdebrepo2help_key_gen()
{
	echo -e "\t<gpg dir> <owner name> <owner email>"
	echo -e "\t\tGenerate new GPG key for repo. Directory is relative to config directory."
}
xdebrepo2_key_gen()
{
	conf_load
# 	echo "${FUNCNAME[0]}($#): $@"
	if [ $# -ne 3 ]; then
		usage $FUNCNAME
	fi

	if [ ! -d "${XDEBREPO2_CONF_PATH}/${1}" ]; then
		mkdir -p -- "${XDEBREPO2_CONF_PATH}/${1}"
		if [ $? -ne 0 ]; then
			exit 1
		fi
	fi

	OUTPUT_DIR=$(realpath "${XDEBREPO2_CONF_PATH}/${1}")
	OWNER=${2}
	OWNER_EMAIL=${3}

	GPG_KEYNAME="${OWNER}"
	echo "Generate key '${GPG_KEYNAME}' <${OWNER_EMAIL}> in '${OUTPUT_DIR}'"
	GPG_KEYCOMMENT="generated by xdebrepo2"

	export GNUPGHOME=${OUTPUT_DIR}/.gnupg

	if [ ! -d "${GNUPGHOME}" ]; then
		# create gpg config
		mkdir -p -- "${GNUPGHOME}"
		chmod 0700 -- "${GNUPGHOME}"
		cat > "${GNUPGHOME}/gpg.conf" << EOF
# Assume that command line arguments are given as UTF8 strings.
utf8-strings
# Prioritize stronger algorithms for new keys.
default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 BZIP2 ZLIB ZIP Uncompressed
# Use a stronger digest than the default SHA1 for certifications.
cert-digest-algo SHA512
EOF
	fi

	GPG_OUTPUT="${OUTPUT_DIR}/${GPG_KEYNAME}"
	GPG_FILENAME="${GPG_OUTPUT}/${GPG_KEYNAME}.gpg"

	# remove old output
	rm -rf "${GPG_OUTPUT}"
	mkdir -p -- "${GPG_OUTPUT}"
	chmod 0700 -- "${GPG_OUTPUT}"

	# generate and password
# 	PASS=$(apg -a 1 -m 24 -n 1 -d)
# 	echo -n ${PASS} > "${GPG_FILENAME}.pass"
# 	chmod 600 -- "${GPG_FILENAME}.pass"
# 	GPG_PASS_OPT=--pinentry-mode loopback --passphrase-file \"${GPG_FILENAME}.pass\"

	# generate gnupg key
	gpg --batch  --gen-key << EOF
%no-protection
%echo Generating a master OpenPGP key
Key-Type: RSA
Key-Length: 4096
Key-Usage: encrypt,sign,auth
Subkey-Type: RSA
Subkey-Length: 4096
Subkey-Usage: encrypt,sign,auth
Name-Real: "${GPG_KEYNAME}"
Name-Comment: ${GPG_KEYCOMMENT}
Name-Email: ${OWNER_EMAIL}
Expire-Date: 0
# Passphrase: ${PASS:-}
# Do a commit here, so that we can later print "done" :-)
%commit
%echo done
EOF
	if [ $? -ne 0 ]; then
		echo "ERROR: gpg --kenkey"
		exit 1
	fi

	# export public key
	gpg -a --output "${GPG_FILENAME}.public" \
		--export-options export-backup \
		--export "${GPG_KEYNAME}"
	if [ $? -ne 0 ]; then
		echo "ERROR: gpg export public key"
		exit 1
	fi
	chmod 0600 -- "${GPG_FILENAME}.public"

	# export private key
	gpg --batch --yes ${GPG_PASS_OPT:-} \
		-a --output "${GPG_FILENAME}.private" \
		--export-options export-backup \
		--export-secret-keys "${GPG_KEYNAME}"
	if [ $? -ne 0 ]; then
		echo "ERROR: gpg export secret key"
		exit 1
	fi
	gpg -a --export "${GPG_KEYNAME}" >> "${GPG_FILENAME}.private"
	if [ $? -ne 0 ]; then
		echo "ERROR: gpg export secret key 2"
		exit 1
	fi
	chmod 0600 -- "${GPG_FILENAME}.private"

	# export signing key
	gpg --batch --yes ${GPG_PASS_OPT:-} \
		-a --output "${GPG_FILENAME}.signing" \
		--export-options export-backup \
		--export-secret-subkeys "${GPG_KEYNAME}"
	if [ $? -ne 0 ]; then
		echo "ERROR: gpg export signing key"
		exit 1
	fi
	chmod 0600 -- "${GPG_FILENAME}.signing"

	main_fpr=$(gpg -k --with-colons "${GPG_KEYNAME}"|grep fpr|head -1|cut -d ':' -f 10)
	main_key=$(gpg -k --with-colons "${GPG_KEYNAME}"|grep pub|cut -d ':' -f 5)
	sub_fpr=$(gpg  -k --with-colons "${GPG_KEYNAME}"|grep fpr|tail -1|cut -d ':' -f 10)
	sub_key=$(gpg  -k --with-colons "${GPG_KEYNAME}"|grep sub|cut -d ':' -f 5)
	echo "main_fpr=${main_fpr}"
	echo "main_key=${main_key}"
	echo ""
	echo "sub_fpr=${sub_fpr}"
	echo "sub_key=${sub_key}"
	echo ""

	echo "remove secret key"
	gpg --batch --yes --delete-secret-keys "${main_fpr}!"

# 	echo "remove password for private key"
# 	gpg --batch --yes ${GPG_PASS_OPT:-} \
# 		--edit-key ${main_fpr} passwd
# 	echo "res $?"
# 	echo "remove password for signing key"
# 	gpg --batch --yes ${GPG_PASS_OPT:-} \
# 		--edit-key ${sub_fpr} passwd
# 	echo "res $?"

	# import with:
	# gpg --home .gnupg --import ${GPG_FILENAME}.signing

	# gpg --keyserver keyserver.ubuntu.com --send-key 10E6133F

	echo "Key output dir: '${GPG_OUTPUT}'"
	ls -laF "${GPG_OUTPUT}"
}

xdebrepo2help_key_ls()
{
	echo -e "\tList all gpg dirs"
}
xdebrepo2_key_ls()
{
# 	<repodir>
# 	echo "${FUNCNAME[0]}($#): $@"
	conf_load

	REPO_CONF_PATH="$(realpath "${XDEBREPO2_CONF_PATH}")"
	find ${REPO_CONF_PATH} -name '.gnupg' -print0 | \
		xargs -0 -I{} dirname "{}" -z|xargs -0 -I{} basename "{}"
}

xdebrepo2help_key_list()
{
	echo -e "\t<gpg dir>"
	echo -e "\t\tList all keys in given dir"
}
xdebrepo2_key_list()
{
	conf_load
# 	echo "${FUNCNAME[0]}($#): $@"
	if [ $# -ne 1 ]; then
		usage $FUNCNAME
	fi
	OUTPUT_DIR=$(realpath ${XDEBREPO2_CONF_PATH}/${1})
	export GNUPGHOME=${OUTPUT_DIR}/.gnupg
	echo "Public"
	gpg -k
	gpg -k --with-colons
	echo
	echo "Private"
	gpg -K
	gpg -K --with-colons
	echo

	main_fpr=$(gpg -k --with-colons|grep fpr|head -1|cut -d ':' -f 10)
	main_key=$(gpg -k --with-colons|grep pub|cut -d ':' -f 5)
	sub_fpr=$(gpg -k --with-colons|grep fpr|tail -1|cut -d ':' -f 10)
	sub_key=$(gpg -k --with-colons|grep sub|cut -d ':' -f 5)
	echo "main_fpr=${main_fpr}"
	echo "main_key=${main_key}"
	echo ""
	echo "sub_fpr=${sub_fpr}"
	echo "sub_key=${sub_key}"
	echo ""
}

xdebrepo2help_key()
{
	gen_subcmds "${FUNCNAME[0]#${CMDS_START_WITH}help_}"
}
xdebrepo2_key()
{
#	echo "${FUNCNAME[0]}($#): $@"
	if [ $# -eq 0 ]; then
		usage $FUNCNAME
	fi
	fname="${FUNCNAME[0]}_${1}"
	if [ "$(type -t "${fname}")" != "function" ]; then
		usage $FUNCNAME
	fi
	shift
	${fname} "$@"
}
