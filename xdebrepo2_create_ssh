#!/bin/bash

# create devel/test/release debian repos

# -u  Treat unset variables as an error when substituting.
# -e  Exit immediately if a command exits with a non-zero status.
set -eu

export REPO_OWNER=${REPO_OWNER:-XDEBREPO2}
export REPO_OWNER_EMAIL=${REPO_OWNER_EMAIL:-office@${REPO_OWNER}.com}

export REPO_SERVER_ADDRESS=${REPO_SERVER_ADDRESS:-127.0.0.1}
export REPO_SERVER_SSH_PORT=${REPO_SERVER_SSH_PORT:-22}

export REPO_PUBLISHER_NAME=${REPO_PUBLISHER_NAME:-github}

export REPO_GROUP=${REPO_GROUP:-repo}
export REPO_PUBLISH_USER=${REPO_PUBLISH_USER:-repop}
export REPO_APT_USER=${REPO_APT_USER:-repoa}
export REPO_DIR=${REPO_DIR:-/repo}

export SSH_KEYGEN_OPTS=${SSH_KEYGEN_OPTS:-"-t ed25519"}

export INFO_FILE=/${REPO_PUBLISH_USER}/${REPO_OWNER}-repo-instructions.txt

export PUBLISH_EXAMPLE_DEVEL=/${REPO_PUBLISH_USER}/${REPO_OWNER}-devel-publish.bash
export PUBLISH_EXAMPLE_TEST=/${REPO_PUBLISH_USER}/${REPO_OWNER}-test-publish.bash
export PUBLISH_EXAMPLE_RELEASE=/${REPO_PUBLISH_USER}/${REPO_OWNER}-release-publish.bash

export SCRIPT_PATH=$(realpath $(dirname $0))

export REPO_CONF_DIR=/${REPO_PUBLISH_USER}
export XDEBREPO2_CONF_DIR_BASE=/${REPO_PUBLISH_USER}




xdebrepo2_create_users_groups_dirs()
{
echo "------ Create group ${REPO_GROUP}"
sudo groupadd -r ${REPO_GROUP}
if [ $? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi

echo "------ Add user ${REPO_PUBLISH_USER}"
sudo useradd -r -c "${REPO_OWNER} debian repository publisher" \
	-d /${REPO_PUBLISH_USER} -M -N -g ${REPO_GROUP} \
	-s /bin/bash ${REPO_PUBLISH_USER}
if [ $? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi
echo "------ Create dir /${REPO_PUBLISH_USER}"
sudo mkdir /${REPO_PUBLISH_USER}
if [ $? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi
echo "------ Set owner of dir /${REPO_PUBLISH_USER}"
sudo chown ${REPO_PUBLISH_USER}.${REPO_GROUP} /${REPO_PUBLISH_USER}
if [ $? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi
echo "------ Set mode of dir /${REPO_PUBLISH_USER}"
sudo chmod 0750 /${REPO_PUBLISH_USER}
if [ $? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi

echo "------ Add user ${REPO_APT_USER}"
sudo useradd -r -c "${REPO_OWNER} debian repository apt reader" \
	-d /${REPO_APT_USER} -M -N -g ${REPO_GROUP} \
	-s /bin/bash ${REPO_APT_USER}
if [ $? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi
echo "------ Create dir /${REPO_APT_USER}"
sudo mkdir /${REPO_APT_USER}
if [ $? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi
echo "------ Set owner of dir /${REPO_APT_USER}"
sudo chown ${REPO_APT_USER}.${REPO_GROUP} /${REPO_APT_USER}
if [ $? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi
echo "------ Set mode of dir /${REPO_APT_USER}"
sudo chmod 0750 /${REPO_APT_USER}
if [ $? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi

echo "------ Create directory for repository ${REPO_DIR}"
sudo mkdir ${REPO_DIR}
if [ $? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi
echo "------ Set owner of repository ${REPO_DIR}"
sudo chown ${REPO_PUBLISH_USER}.${REPO_GROUP} ${REPO_DIR}
if [ $? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi
echo "------ Set mode of repository ${REPO_DIR}"
sudo chmod 0775 ${REPO_DIR}
if [ $? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi

# generate .bashrc for users

# exec as user ${REPO_APT_USER}
sudo su ${REPO_APT_USER} << EOF

export XDEBREPO2_CONF_DIR_BASE=${XDEBREPO2_CONF_DIR_BASE}
export REPO_APT_USER=${REPO_APT_USER}

echo "------ Add XDEBREPO2_CONF_DIR_BASE=${XDEBREPO2_CONF_DIR_BASE} to /${REPO_APT_USER}/.bashrc"
echo "export XDEBREPO2_CONF_DIR_BASE=${XDEBREPO2_CONF_DIR_BASE}" > /${REPO_APT_USER}/.bashrc
if [ \$? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi

EOF

# exec as user ${REPO_PUBLISH_USER} from home dir (sudo su ${REPO_PUBLISH_USER})
sudo su ${REPO_PUBLISH_USER} << EOF

export XDEBREPO2_CONF_DIR_BASE=${XDEBREPO2_CONF_DIR_BASE}
export REPO_DIR=${REPO_DIR}
export REPO_CONF_DIR=${REPO_CONF_DIR}
export REPO_APT_USER=${REPO_APT_USER}

echo "export XDEBREPO2_CONF_DIR_BASE=${XDEBREPO2_CONF_DIR_BASE}" > ${REPO_DIR}/.bashrc
echo "export XDEBREPO2_CONF_DIR_BASE=${XDEBREPO2_CONF_DIR_BASE}" > ${REPO_CONF_DIR}/.bashrc

EOF
}




xdebrepo2_create_repos()
{
# exec as user ${REPO_PUBLISH_USER} from home dir (sudo su ${REPO_PUBLISH_USER})
sudo su ${REPO_PUBLISH_USER} << EOF

export REPO_CONF_DIR=${REPO_CONF_DIR}
export XDEBREPO2_CONF_DIR_BASE=${XDEBREPO2_CONF_DIR_BASE}
export REPO_GROUP=${REPO_GROUP}
export REPO_PUBLISH_USER=${REPO_PUBLISH_USER}
export REPO_APT_USER=${REPO_APT_USER}
export REPO_DIR=${REPO_DIR}
export SCRIPT_PATH=${SCRIPT_PATH}
export INFO_FILE=${INFO_FILE}

echo "------ Copy xdebrepo2_publish"
echo "------ cp -v ${SCRIPT_PATH}/xdebrepo2_publish ${REPO_CONF_DIR}"
cp -v ${SCRIPT_PATH}/xdebrepo2_publish ${REPO_CONF_DIR}
if [ \$? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi

echo "------ xdebrepo2 init ${REPO_DIR} ${XDEBREPO2_CONF_DIR_BASE}"
xdebrepo2 init ${REPO_DIR} ${XDEBREPO2_CONF_DIR_BASE}
if [ \$? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi

echo "------ chmod 0750 ${REPO_CONF_DIR}/etc"
chmod 0750 ${REPO_CONF_DIR}/etc
if [ \$? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi
echo "------ chmod 0750 ${REPO_CONF_DIR}/etc/xdebrepo2"
chmod 0750 ${REPO_CONF_DIR}/etc/xdebrepo2
if [ \$? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi

echo "------ Generate devel key"
xdebrepo2 key gen ${REPO_OWNER}-devel "${REPO_OWNER} Devel Debian Repository" "${REPO_OWNER_EMAIL}"
if [ \$? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi
export REPO_SRV_NAME="${REPO_OWNER}-devel.xdebrepo2"
export REPO_WEB_DIR="${REPO_DIR}/${REPO_OWNER}-devel"
export REPO_ORIGIN="${REPO_OWNER} Devel deb repository"
export REPO_DESCRIPTION="${REPO_OWNER} Devel deb repository"
echo "------ Create devel repo"
xdebrepo2 repo create ${REPO_OWNER}-devel ${REPO_OWNER}-devel "${REPO_OWNER} Devel Debian Repository"
if [ \$? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi
echo "------ Set mode of devel repo"
chmod 0755 ${REPO_DIR}/${REPO_OWNER}-devel
if [ \$? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi
echo "------ Set mode of devel repo conf"
chmod 0750 ${REPO_CONF_DIR}/${REPO_OWNER}-devel
if [ \$? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi

echo "------ Generate test key"
xdebrepo2 key gen ${REPO_OWNER}-test "${REPO_OWNER} Test Debian Repository" "${REPO_OWNER_EMAIL}"
if [ \$? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi
export REPO_SRV_NAME="${REPO_OWNER}-test.xdebrepo2"
export REPO_WEB_DIR="${REPO_DIR}/${REPO_OWNER}-test"
export REPO_ORIGIN="${REPO_OWNER} Test deb repository"
export REPO_DESCRIPTION="${REPO_OWNER} Test deb repository"
echo "------ Create test repo"
xdebrepo2 repo create ${REPO_OWNER}-test ${REPO_OWNER}-test "${REPO_OWNER} Test Debian Repository"
if [ \$? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi
echo "------ Set mode of test repo"
chmod 0755 ${REPO_DIR}/${REPO_OWNER}-test
if [ \$? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi
echo "------ Set mode of test repo conf"
chmod 0750 ${REPO_CONF_DIR}/${REPO_OWNER}-test
if [ \$? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi

echo "------ Generate release key"
xdebrepo2 key gen ${REPO_OWNER}-release "${REPO_OWNER} Release Debian Repository" "${REPO_OWNER_EMAIL}"
if [ \$? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi
export REPO_SRV_NAME="${REPO_OWNER}-release.xdebrepo2"
export REPO_WEB_DIR="${REPO_DIR}/${REPO_OWNER}-release"
export REPO_ORIGIN="${REPO_OWNER} Release deb repository"
export REPO_DESCRIPTION="${REPO_OWNER} Release deb repository"
echo "------ Create release repo"
xdebrepo2 repo create ${REPO_OWNER}-release ${REPO_OWNER}-release "${REPO_OWNER} Release Debian Repository"
if [ \$? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi
echo "------ Set mode of release repo"
chmod 0755 ${REPO_DIR}/${REPO_OWNER}-release
if [ \$? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi
echo "------ Set mode of release repo conf"
chmod 0750 ${REPO_CONF_DIR}/${REPO_OWNER}-release
if [ \$? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi

echo "------ Generate ${REPO_PUBLISHER_NAME} devel key"
ssh-keygen ${SSH_KEYGEN_OPTS} -C ${REPO_PUBLISHER_NAME}@${REPO_OWNER}-devel -f "${REPO_CONF_DIR}/${REPO_PUBLISHER_NAME}@${REPO_OWNER}-devel" -N ""
if [ \$? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi
echo "------ Generate ${REPO_PUBLISHER_NAME} test key"
ssh-keygen ${SSH_KEYGEN_OPTS} -C "${REPO_PUBLISHER_NAME}@${REPO_OWNER}-test" -f "${REPO_CONF_DIR}/${REPO_PUBLISHER_NAME}@${REPO_OWNER}-test" -N ""
if [ \$? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi
echo "------ Generate ${REPO_PUBLISHER_NAME} release key"
ssh-keygen ${SSH_KEYGEN_OPTS} -C "${REPO_PUBLISHER_NAME}@${REPO_OWNER}-release" -f "${REPO_CONF_DIR}/${REPO_PUBLISHER_NAME}@${REPO_OWNER}-release" -N ""
if [ \$? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi

echo "------ Add devel public keys to ${REPO_CONF_DIR}/.ssh/authorized_keys"
xdebrepo2 ssh add_publish_key ${REPO_OWNER}-devel ${REPO_CONF_DIR}/${REPO_PUBLISHER_NAME}@${REPO_OWNER}-devel.pub
if [ \$? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi
echo "------ Add test public keys to ${REPO_CONF_DIR}/.ssh/authorized_keys"
xdebrepo2 ssh add_publish_key ${REPO_OWNER}-test ${REPO_CONF_DIR}/${REPO_PUBLISHER_NAME}@${REPO_OWNER}-test.pub
if [ \$? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi
echo "------ Add release public keys to ${REPO_CONF_DIR}/.ssh/authorized_keys"
xdebrepo2 ssh add_publish_key ${REPO_OWNER}-release ${REPO_CONF_DIR}/${REPO_PUBLISHER_NAME}@${REPO_OWNER}-release.pub
if [ \$? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi

echo "------ Export devel debian repository public key"
xdebrepo2 repo pubkey ${REPO_OWNER}-devel > ${REPO_DIR}/${REPO_OWNER}-devel/${REPO_OWNER}-devel.key
if [ \$? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi
echo "------ Export test debian repository public key"
xdebrepo2 repo pubkey ${REPO_OWNER}-test > ${REPO_DIR}/${REPO_OWNER}-test/${REPO_OWNER}-test.key
if [ \$? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi
echo "------ Export release debian repository public key"
xdebrepo2 repo pubkey ${REPO_OWNER}-release > ${REPO_DIR}/${REPO_OWNER}-release/${REPO_OWNER}-release.key
if [ \$? -ne 0 ]; then
	echo "------ ERROR"
	exit 1
fi
EOF
}




# args: output file name, repo type
xdebrepo2_create_publish_script()
{

# exec as user ${REPO_PUBLISH_USER} from home dir (sudo su ${REPO_PUBLISH_USER})
sudo su ${REPO_PUBLISH_USER} << EOF

cat > ${1} << IEOF
#!/bin/bash

# ----- Publish debian file to ${REPO_OWNER}-${2} -----

if [ \\\$# -ne 2 ]; then
	echo "Usage: \\\$0 <deb file> <os distro>"
	exit 1
fi

export DEB_FILE=\\\${1}
export DEB_FILE_DISTRO=\\\${2}

export SSH_DIR=~/.ssh/

# GITHUB SECRETS begin
export XDEBREPO2_HOST=${REPO_SERVER_ADDRESS}
export XDEBREPO2_PORT=${REPO_SERVER_SSH_PORT}
export XDEBREPO2_USER=${REPO_PUBLISH_USER}
export XDEBREPO2_REPO=${REPO_OWNER}-${2}
export XDEBREPO2_PUBLISH_KEY="$(cat ${REPO_CONF_DIR}/${REPO_PUBLISHER_NAME}@${REPO_OWNER}-${2})"
export XDEBREPO2_PUBLISH_PATH="${REPO_DIR}/tmp/${REPO_OWNER}-${2}"
export XDEBREPO2_PUBLISH_SCRIPT="/${REPO_PUBLISH_USER}/xdebrepo2_publish"
export XDEBREPO2_KNOWN_HOSTS="$(ssh-keyscan -p ${REPO_SERVER_SSH_PORT} -H ${REPO_SERVER_ADDRESS} 2>/dev/null)"
# GITHUB SECRETS end

echo "\\\${XDEBREPO2_PUBLISH_KEY}" > \\\${SSH_DIR}/xdebrepo2-temp-private.key
chmod 0600 \\\${SSH_DIR}/xdebrepo2-temp-private.key
echo "\\\${XDEBREPO2_KNOWN_HOSTS}" >> \\\${SSH_DIR}/known_hosts


# publish script

#  1. copy file
echo "scp -P \\\${XDEBREPO2_PORT} -i \\\${SSH_DIR}/xdebrepo2-temp-private.key \\\${DEB_FILE} " \\\\
	" \\\${XDEBREPO2_USER}@\\\${XDEBREPO2_HOST}:\\\${XDEBREPO2_PUBLISH_PATH}"
scp -P \\\${XDEBREPO2_PORT} -i \\\${SSH_DIR}/xdebrepo2-temp-private.key \\\${DEB_FILE}   \\\\
	\\\${XDEBREPO2_USER}@\\\${XDEBREPO2_HOST}:\\\${XDEBREPO2_PUBLISH_PATH}
if [ \\\$? -ne 0 ]; then
	rm -f \\\${SSH_DIR}/xdebrepo2-temp-private.key
	echo "Publish deb package: '\\\${DEB_FILE}' scp FAIL"
	exit 1
fi
#  2. tell xdebrepo2
echo "ssh -p \\\${XDEBREPO2_PORT} -i \\\${SSH_DIR}/xdebrepo2-temp-private.key " \\\\
	" \\\${XDEBREPO2_USER}@\\\${XDEBREPO2_HOST} " \\\\
	" \\\${XDEBREPO2_PUBLISH_SCRIPT} \\\${XDEBREPO2_REPO} " \\\\
	" \\\${DEB_FILE_DISTRO} \\\$(basename \\\${DEB_FILE})"
ssh -p \\\${XDEBREPO2_PORT} -i \\\${SSH_DIR}/xdebrepo2-temp-private.key \\\\
	\\\${XDEBREPO2_USER}@\\\${XDEBREPO2_HOST} \\\\
	\\\${XDEBREPO2_PUBLISH_SCRIPT} \\\${XDEBREPO2_REPO} \\\\
	\\\${DEB_FILE_DISTRO} \\\$(basename \\\${DEB_FILE})
if [ \\\$? -ne 0 ]; then
	rm -f \\\${SSH_DIR}/xdebrepo2-temp-private.key
	echo "Publish deb package: '\\\${DEB_FILE}' ssh FAIL"
	exit 1
fi

rm -f \\\${SSH_DIR}/xdebrepo2-temp-private.key

echo "Publish deb package: '\\\${DEB_FILE}' to ${REPO_OWNER}-${2} done"

IEOF
chmod 0700 ${1}
EOF
}




xdebrepo2_create_help_files()
{

xdebrepo2_create_publish_script ${PUBLISH_EXAMPLE_DEVEL} devel
xdebrepo2_create_publish_script ${PUBLISH_EXAMPLE_TEST} test
xdebrepo2_create_publish_script ${PUBLISH_EXAMPLE_RELEASE} release

# exec as user ${REPO_PUBLISH_USER} from home dir (sudo su ${REPO_PUBLISH_USER})
sudo su ${REPO_PUBLISH_USER} << EOF

cat >> ${INFO_FILE} << IEOF

# ----- GITHUB actions example -----

# 1. Repository secrets

# Create git repository secrets for ${REPO_OWNER}-devel debian repository
XDEBREPO2_HOST: ${REPO_SERVER_ADDRESS}
XDEBREPO2_PORT: ${REPO_SERVER_SSH_PORT}
XDEBREPO2_USER: ${REPO_PUBLISH_USER}
XDEBREPO2_REPO: ${REPO_OWNER}-devel
XDEBREPO2_PUBLISH_KEY: # from file ${REPO_CONF_DIR}/${REPO_PUBLISHER_NAME}@${REPO_OWNER}-devel
$(cat ${REPO_CONF_DIR}/${REPO_PUBLISHER_NAME}@${REPO_OWNER}-devel)
XDEBREPO2_PUBLISH_PATH: ${REPO_DIR}/tmp/${REPO_OWNER}-devel
XDEBREPO2_PUBLISH_SCRIPT: /${REPO_PUBLISH_USER}/xdebrepo2_publish
XDEBREPO2_KNOWN_HOSTS: # ssh-keyscan -p ${REPO_SERVER_SSH_PORT} -H ${REPO_SERVER_ADDRESS} 2>/dev/null
$(ssh-keyscan -p ${REPO_SERVER_SSH_PORT} -H ${REPO_SERVER_ADDRESS} 2>/dev/null)

# Create git repository secrets for ${REPO_OWNER}-test debian repository
XDEBREPO2_HOST: ${REPO_SERVER_ADDRESS}
XDEBREPO2_PORT: ${REPO_SERVER_SSH_PORT}
XDEBREPO2_USER: ${REPO_PUBLISH_USER}
XDEBREPO2_REPO: ${REPO_OWNER}-test
XDEBREPO2_PUBLISH_KEY: # from file ${REPO_CONF_DIR}/${REPO_PUBLISHER_NAME}@${REPO_OWNER}-test
$(cat ${REPO_CONF_DIR}/${REPO_PUBLISHER_NAME}@${REPO_OWNER}-test)
XDEBREPO2_PUBLISH_PATH: ${REPO_DIR}/tmp/${REPO_OWNER}-test
XDEBREPO2_PUBLISH_SCRIPT: /${REPO_PUBLISH_USER}/xdebrepo2_publish
XDEBREPO2_KNOWN_HOSTS: # ssh-keyscan -p ${REPO_SERVER_SSH_PORT} -H ${REPO_SERVER_ADDRESS} 2>/dev/null
$(ssh-keyscan -p ${REPO_SERVER_SSH_PORT} -H ${REPO_SERVER_ADDRESS} 2>/dev/null)

# Create git repository secrets for ${REPO_OWNER}-release debian repository
XDEBREPO2_HOST: ${REPO_SERVER_ADDRESS}
XDEBREPO2_PORT: ${REPO_SERVER_SSH_PORT}
XDEBREPO2_USER: ${REPO_PUBLISH_USER}
XDEBREPO2_REPO: ${REPO_OWNER}-release
XDEBREPO2_PUBLISH_KEY: # from file ${REPO_CONF_DIR}/${REPO_PUBLISHER_NAME}@${REPO_OWNER}-release
$(cat ${REPO_CONF_DIR}/${REPO_PUBLISHER_NAME}@${REPO_OWNER}-release)
XDEBREPO2_PUBLISH_PATH: ${REPO_DIR}/tmp/${REPO_OWNER}-release
XDEBREPO2_PUBLISH_SCRIPT: /${REPO_PUBLISH_USER}/xdebrepo2_publish
XDEBREPO2_KNOWN_HOSTS: # ssh-keyscan -p ${REPO_SERVER_SSH_PORT} -H ${REPO_SERVER_ADDRESS} 2>/dev/null
$(ssh-keyscan -p ${REPO_SERVER_SSH_PORT} -H ${REPO_SERVER_ADDRESS} 2>/dev/null)

# 2. Add in github workflows action step

- name: Publish a deb files
run: tools/github-publish
shell: bash
env:
XDEBREPO2_HOST: \\\${{secrets.XDEBREPO2_HOST}}
XDEBREPO2_PORT: \\\${{secrets.XDEBREPO2_PORT}}
XDEBREPO2_USER: \\\${{secrets.XDEBREPO2_USER}}
XDEBREPO2_REPO: \\\${{secrets.XDEBREPO2_REPO}}
XDEBREPO2_PUBLISH_KEY: \\\${{secrets.XDEBREPO2_PUBLISH_KEY}}
XDEBREPO2_PUBLISH_PATH: \\\${{secrets.XDEBREPO2_PUBLISH_PATH}}
XDEBREPO2_PUBLISH_SCRIPT: \\\${{secrets.XDEBREPO2_PUBLISH_SCRIPT}}
XDEBREPO2_KNOWN_HOSTS: \\\${{secrets.XDEBREPO2_KNOWN_HOSTS}}

# 3. Create script 'tools/github-publish'
export SSH_DIR=/root/.ssh/
mkdir -pv \\\${SSH_DIR}
echo "\\\${XDEBREPO2_PUBLISH_KEY}" > \\\${SSH_DIR}/private.key
echo "\\\${XDEBREPO2_KNOWN_HOSTS}" >> \\\${SSH_DIR}/known_hosts
sudo chmod 0700 \\\${SSH_DIR}/
sudo chmod 0600 \\\${SSH_DIR}/*

DEB_FILE="fixme.deb"
DEB_FILE_DISTRO="\\\$(lsb_release -cs)"

echo "Publish deb package: '\\\${DEB_FILE}'"

# push on \\\${XDEBREPO2_REPO}
#  step 1. copy file
scp -P \\\${XDEBREPO2_PORT} -i \\\${SSH_DIR}/private.key \\\${DEB_FILE} \\
	\\\${XDEBREPO2_USER}@\\\${XDEBREPO2_HOST}:\\\${XDEBREPO2_PUBLISH_PATH}
if [ \\\$? -ne 0 ]; then
	echo "Publish deb package: '\\\${DEB_FILE}' scp FAIL"
	exit 1
fi

#  step 2. tell xdebrepo2
ssh -p \\\${XDEBREPO2_PORT} -i \\\${SSH_DIR}/private.key \\
	\\\${XDEBREPO2_USER}@$\\\{XDEBREPO2_HOST} \\
	\\\${XDEBREPO2_PUBLISH_SCRIPT}/ \\\${XDEBREPO2_REPO} \\
	\\\${DEB_FILE_DISTRO} \\\$(basename \\\${DEB_FILE})
if [ \\\$? -ne 0 ]; then
	echo "Publish deb package: '\\\${DEB_FILE}' ssh FAIL"
	res=1
	break
fi

# 4. Test

# ----- Manual example -----

# Publish deb file

DEB_FILE="fixme.deb"
DEB_FILE_DISTRO="\\\$(lsb_release -cs)"

# push on ${REPO_OWNER}-devel
#  step 1. copy file
scp -P ${REPO_SERVER_SSH_PORT} -i ${REPO_PUBLISHER_NAME}@${REPO_OWNER}-devel \\\${DEB_FILE} \\\\
	${REPO_PUBLISH_USER}@${REPO_SERVER_ADDRESS}:${REPO_DIR}/tmp/${REPO_OWNER}-devel
#  step 2. tell xdebrepo2
ssh -p ${REPO_SERVER_SSH_PORT} -i ${REPO_PUBLISHER_NAME}@${REPO_OWNER}-devel \\\\
	${REPO_PUBLISH_USER}@${REPO_SERVER_ADDRESS} \\\\
	${REPO_CONF_DIR}/xdebrepo2_publish ${REPO_OWNER}-devel \\\\
	\\\${DEB_FILE_DISTRO} \\\$(basename \\\${DEB_FILE})

# See example scripts (ONLY FOR TEST!!!):
# ${PUBLISH_EXAMPLE_DEVEL}
# ${PUBLISH_EXAMPLE_TEST}
# ${PUBLISH_EXAMPLE_RELEASE}


# ----- Use repository -----

# ON SERVER (as ${REPO_PUBLISH_USER} user)

# generate clients ssh keys (or on client and copy public key to server)
export CLIENT_NAME=client_name
export REPO_LEVEL=devel # test, release
ssh-keygen ${SSH_KEYGEN_OPTS} \\\\
	-C "\\\${CLIENT_NAME}@${REPO_OWNER}-\\\${REPO_LEVEL}" \\\\
	-f "\\\${CLIENT_NAME}@${REPO_OWNER}-\\\${REPO_LEVEL}" -N ""

# add public key to repository (exec as user ${REPO_APT_USER})
xdebrepo2 ssh add_apt_key ${REPO_OWNER}-\\\${REPO_LEVEL} \\\\
	\\\${CLIENT_NAME}@${REPO_OWNER}-\\\${REPO_LEVEL}.pub

# copy "\\\${CLIENT_NAME}@${REPO_OWNER}-\\\${REPO_LEVEL}" to client /root/.ssh/

# generate apt sources.list row for client (/etc/apt/sources.list.d/${REPO_OWNER}.list)
xdebrepo2 repo aptconf ${REPO_OWNER}-\\\${REPO_LEVEL}


# ON CLIENT

Create your own config file /etc/apt/apt.conf.d/30-ssh-transport and paste the following:
Dir::Bin::Methods::rsh "rsh";
Dir::Bin::Methods::ssh "ssh";

export CLIENT_NAME=client_name
export REPO_LEVEL=devel # test, release
sudo cp "\\\${CLIENT_NAME}@${REPO_OWNER}-\\\${REPO_LEVEL}" /root/.ssh/

# Add to /root/.ssh/config
host ${REPO_OWNER}-\\\${REPO_LEVEL}.xdebrepo2
	hostname ${REPO_SERVER_ADDRESS}
	user ${REPO_APT_USER}
	port ${REPO_SERVER_SSH_PORT}
	IdentityFile ~/.ssh/\\\${CLIENT_NAME}@${REPO_OWNER}-\\\${REPO_LEVEL}
	ForwardAgent no
	ForwardX11 no

# Add repository public key to apt

# one line
sudo ssh ${REPO_OWNER}-\\\${REPO_LEVEL}.xdebrepo2 "cat /repo/${REPO_OWNER}-\\\${REPO_LEVEL}/${REPO_OWNER}-\\\${REPO_LEVEL}.key" | sudo apt-key add

# two lines version
sudo scp ${REPO_OWNER}-\\\${REPO_LEVEL}.xdebrepo2:${REPO_DIR}/${REPO_OWNER}-\\\${REPO_LEVEL}/${REPO_OWNER}-\\\${REPO_LEVEL}.key .
sudo apt-key add ${REPO_OWNER}-\\\${REPO_LEVEL}.key

sudo apt update

IEOF

chmod 0600 ${INFO_FILE}
echo "See instructions in ${INFO_FILE}"

EOF
}

xdebrepo2_create_users_groups_dirs
xdebrepo2_create_repos
xdebrepo2_create_help_files
